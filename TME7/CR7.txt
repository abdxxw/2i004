=======================================  TME7  =============================================
############################## BOUSBA Abdellah 3804891 #####################################
============================================================================================

 ==============
|| Exercice1: ||
 ==============


1. les 4 octets o1 o2 o3 o4 se trouves consecutivement en memoire sur un un mot memoire 04030201 en commancent a gauche , et m1 occupe un mot.

2.   variable       adresse
	o1		0x10010000
	o2		0x10010001
	o3		0x10010002
	o4		0x10010003
	m1		0x10010004

3.en activant Show Label Window on affiche les adresses de chaque variable et c'est bien le resultat obtenu avant.

============================================================================================

 ==============
|| Exercice2: ||
 ==============

1. 

.data
v1: .word -1
v2: .word 0xFF
.text

lui $3, 0x1001
lw $5, 0($3)
lw $6 4($3)
ori $2,$0,1
or $4,$0,$5
syscall
or $4,$0,$5
syscall
ori $2,$0,10
syscall

le programme affiche -1 255

2.on ajoute les instruction suivant     addi $5,$5,1
					addi $6,$6,1
					sw $5, 0($3)
					sw $6 4($3)
le programme affiche 0 256 et en regardant l'adresse 0x1001000 (var1) on trouve 0x00000000 = 0
					   l'adresse 0x1001004 (var2) on trouve 0x00000100 = 256

3.pour recuperer un octet signé en utilise lb , non signé on utilise lbu

le programme affiche -1 pour $7 car on a pris l'octet a l adresse 10010000 et on le met dans les bits les plus droite du registe mais tant que les registres son sur 32 bits on remplis le reste avec le bit de signe qui est 1 alors $7 = 0xFFFFFFFF = -1 

		     255 pour $8 car on a utiliser une lecture non isgné d'ou on remplis les bits de poids fort du registre avec des 0 alors $8 = 0x000000FF = 255


============================================================================================

 ==============
|| Exercice3: ||
 ==============
					
1.

.data 
ch: .asciiz "coucou"
.text
lui $3,0x1001
ori $2, $0, 4    #appel system pour afficher une chaine de caractere
or $4, $0, $3
syscall
ori $2,$0,10
syscall


2. on ajoutes les instruction suivantes :


lbu $6, 0($3)  # lecture non signed d'un octet ( premier caractere )
lbu $7, 1($3) # lecture non signed d'un octet ( deuxieme caractere )
sb $6, 1($3) # ecriture  d'un octet ( deuxieme caractere ) a l adresse du premier
sb $7, 0($3) # ecriture  d'un octet ( premier caractere ) a ladresse du deuxieme



============================================================================================

 ==============
|| Exercice4: ||
 ==============

1. le codage de "123456" est : 0x00363534333231 mais represanté en memoire 31,32,34,35,36,00 (petit boutien)

2. .byte 0x31,0x32,0x33,0x34,0x35,0x36,0x00

3.


lui $3,0x1001

ori $2, $0, 4    #appel system pour afficher une chaine de caractere
or $4, $0, $3
syscall
ori $2,$0,10
syscall

4. pour afficher le 3eme caractere qui est a l adresse 10010002

lbu, $5,2($3)  #affichage 3 eme caractere
ori $2,$0,1
or $4,$0,$5
syscall

le programme affiche 51 qui est le code ascii de 3 = 0x33 

5. pour retrouver un chiffre a partir de son code ASCII on met le code ASCII -48 ( 0 = 48 ... 9=57)

6. on ajoute les instructions suivante :

addi $5,$5,-48
ori $2,$0,1
or $4,$0,$5
syscall


on obtient 3 

7. essayant avec la valeur 4 :


lbu, $6,3($3)  # lecture de 4 
addi $6,$6,-48 # methode convert ascii to decimal
ori $2,$0,1 # affichage 
or $4,$0,$6
syscall


et le programme affiche 4

============================================================================================

 ==============
|| Exercice5: ||
 ==============

.data 
tab: .word 4,23,12,3,8,1
.text


lui $3,0x1001

lw $5,12($3)     #int s = tab[3]
lw $6,16($3)    #int p = tab[4]


add $6,$6,$5   # p=p+s
addi $5,$5,1   #s = s + 1
sw $5, 0($3)   #tab[0] = s
sw $5, 4($3)   #tab[1] = p
lw $5,20($3)    # s= tab[5]
sw $5, 8($3)   #tab[2] = s

ori $2, $0 , 10
syscall


apres execution du programme on doit avoir le tableau suivant {4,11,1,3,8,1}

et en regardant la memoire a l adresse 0x10010000 (tab) on trouve :0x10010000 la valeur 0x00000004 = 4
								   0x10010000 la valeur 0x0000000b = 11
								   0x10010000 la valeur 0x00000001 = 1
								   0x10010000 la valeur 0x00000003 = 3
								   0x10010000 la valeur 0x00000008 = 8
								   0x10010000 la valeur 0x00000001 = 1


								    





