=======================================  TME8  =============================================
############################## BOUSBA Abdellah 3804891 #####################################
============================================================================================

 ==============
|| Exercice1: ||
 ==============

.data
.text

	ori $5,$0,1	#i=1
	xor $6,$6,$6	#somme=0

for:	slti $7, $5,11	# 1 si i<11
	beq $7,$0 ,endif	#jump si j>=11
	add $6,$6,$5	# somme = somme + i;
	addi $5,$5,1	#i++
	j for
endif:
	or $4,$0,$6	#printf somme
	ori $2,$0,1
	syscall
	ori $2,$0,10 	#return 0
	syscall


le programme affiche la somme de 1+2+...+10 et en executant il afffiche 55 qui est bien le resultat 

============================================================================================

 ==============
|| Exercice2: ||
 ==============


.data
.text
	
	
	ori $4,$0,123	#a = 123
	ori $5,$0,245	#b = 245
	
	beq $4, $5, end_while 	#jump si a == b 
	slt $6,$5, $4 	# 1 si b<a
	bne $6,$0,then	#jump si b<a
	sub $5, $5, $4		#b=b-a
	j end_if
then:
	sub $4,$4,$5		#a=a-b
end_if:
end_while:
	ori $2,$0,1	#afficher a ( deja dans $4 )
	syscall
	ori $2,$0,10	#return 0
	syscall


le programme affiche le pgcd de a et b en executant le programme avec: a= 8 , b=6 ====> affiche 2 qui est bien le resultat.
	
	
remarque:
pour la condition de la boucle on a a>b or sa negation est a<=b donc pour simplifier le test on utilise b<a qui est equivalent a>b 
on doit pas oublier le jump apres la fin du else pour ne pas executer le then aussi.


============================================================================================

 ==============
|| Exercice3: ||
 ==============


.data
ch:	.asciiz "abcdef"
.text
	xor $4,$4,$4 #size = 0
	lui $3, 0x1001	#$3 = ch
boucle:
	lbu $5,0($3)	#$5 = ch[i]
	beq	$5,$0, end	#jump si ch[i] = '\0'
	addi $4,$4,1	#size++
	addi $3, $3, 1 # i++
	j boucle	#retour au debut
end:
	ori $2,$0,1	#afficher size
	syscall
	ori $2,$0,10	#return 0
	syscall
	

pour pouvoir compter le nombre de caractere d'une chaine on doit la parcourire caractere par caractere jusqua trouver le char '\0' et pour faire cela en MIPS en va faire des lectures
des octet (lbu) et verifiant si char[i] == '\0' qui est equivalent a 0x00 .



============================================================================================

 ==============
|| Exercice4: ||
 ==============


.data
V:	.word 6
tab:	.word 5,8,9,4,2,6,1,-1
.text
	xor $4,$4,$4 # nb = 0
	lui $3,0x1001
	lw $5,0($3) 	#$5 = V
boucle:
	lw $6,4($3)	#$6 = tab[i]
	addi $7,$0,-1	#$7 = -1
	beq $7,$6,end		# jump si tab[i] == -1
	slt $8,$6,$5		# 1 si tab[i] < V
	beq $8, $0,notif	# jump si tab[i]>= V
	addi $4,$4,1		#nb++
notif:
	addi $3,$3,4		#i++
	j boucle
end:
	ori $2,$0,1		#affichage nb( deja dans $4)
	syscall
	ori $2,$0,10		#return 0
	syscall
	
	
	
pour implimenter ce programme on doit parcourir le tableau en fesant une lecture memoire des mots et verifiant avec la commande slt si tab[i]<V et incrementant un compteur en executant
avec les parametres suivantes : 

V:	.word 6
tab:	.word 5,8,9,4,2,6,1,-1

le programme affiche 4 qui est le bon resultat.

