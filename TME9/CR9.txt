=======================================  TME8  =============================================
############################## BOUSBA Abdellah 3804891 #####################################
============================================================================================

 ===================
|| Exercice 4 TD 9: ||
 ===================

pour ecrire la fonction strcpy on doit : 
allouer l'espace pour stocker la copie
lire la chaine qu'on veut copier.
parcourire la chaine tantqu'on est pas a lafin ( 0x00) on recopie caractere par caractere on utilisant lb et sb
on ajoute 0x00 a la fin de la copie.

.data
ch2: .space 50
.text
lui $3,0x1001
ori $2, $0,8
addi $4,$3,50
ori $5,$0,50
syscall

ori $2,$0,11
ori $4,$0, 0x0A  #affichage \n
syscall
addi $4,$3,50

boucle:
lb $5,0($4)
beq $5,$0,end
sb $5,0($3)
addi $4,$4,1
addi $3,$3,1
j boucle
end:
sb $5,0($3)
ori $2,$0,4
lui $4, 0x1001
syscall
ori $2,$0,10
syscall

============================================================================================

 ===============
|| Exercice 1: ||
================


.data
ch: .space 11
.text
lui $3,0x1001
xor $5,$5,$5 # cpt =0
ori $10,$0,10
ori $2,$0,5 # scanf nb
syscall
or $6,$0,$2 # q=nb
do1:
div  $6,$10 
mflo $6 # q=q/10
addi $5,$5,1 #cpt++
bne $6,$0, do1

add $4,$3,$5
sb $0,0($4) #ch[cpt] = 0


or $6,$0,$2 # q=nb

do2:

div  $6,$10 
mfhi $7# r= q%10
mflo $6# q = q/10
addi $5,$5,-1 #cpt--
addi $7,$7, 0x30 #r = r+0x30
add $4,$3,$5
sb $7,0($4) #ch[cpt] = r
bgtz $5,do2

ori $4,$3,0
ori $2,$0,4
syscall
ori $2,$0,10
syscall



remarques: 
pour utiliser la division on recupere le resultat de LO et le reste ( modulo) du HI
pour convertir un entier en char on ajoute 0x30 alors apres le premier parcours pour recuperer la taille on ecrire chaque reste en utilisant sb 
le test du do{}while() est simple en mips si la condition est vrai on monte sinon on continue l'execution
on affiche la chaine de caractere avec l'appel system 4



============================================================================================

 ===============
|| Exercice 2: ||
================

1.
Code ASCII de ' ' ===> 0x20
			  '*' ===> 0x2A
			  '\0' ===> 0x00
l'adresse de la variable image est 0x10010000+4+1+1 = 0x10010006


2.pour faciliter l affichage a la fin du programme on garde $4 a 0x10010006 
et on met une variable temp qui est = 0x10010006+i*12 a chaque ligne i on pour  i=0 0x10010006
																				i=1 0x10010012
																				i=2 0x1001001E
																				i=3 0x1001002A
																				i=4 0x10010036
																		
3.

image[i][j] = ($10*2+2)*$5 + $6 + $4
image[i][2*n-j] = ($10*2+2)*$5 + 2*$10-$6 + $4


4.

.data
n:		.word 5
espace:	.byte 0x20
etoile:	.byte '*'
image:	.space 12
		.space 12
		.space 12
		.space 12
		.space 12
fin_char:	.byte 0x00
# @ image[i][j] = (i*(2*n+2)+j )+@deb
.text

lui $3, 0x1001
lb $18,4($3) # $19 = ' '
lb $19, 5($3) # $18 = '*'
lw $10,0($3) # $10 = n = 5
xor $5,$5,$5 #i=0
addi $4,$3,6 #$4 = @image[0]




for1:
slt $21,$5,$10
beq $21, $0, endfor1 # saut si i>=n

xor $6,$6,$6 #j=0
sub $22,$10,$5# n-i

for2:
slt $21,$6,$22
beq $21, $0, endfor2 # saut si j>=n-i

sll $8,$10,1 #n*2
addi $8,$8,2 #n*2+2
mult $8,$5
mflo $8  # (n*2+2)*i
add $8,$8,$6 # (n*2+2)*i + j
add $8,$8,$4 # $8 = @image[i][j]
sb $18, 0($8) #image[i][j] = espace

sll $8,$10,1 #n*2
addi $8,$8,2 #n*2+2
mult $8,$5
mflo $8  # (n*2+2)*i
sll $9,$10,1 #n*2
sub $9, $9,$6 #n*2-j
add $9,$9,$8 # (n*2+2)*i + (n*2-j)
add $9,$9,$4 # $9 = @image[i][2*n-j]
sb $18, 0($9) #image[i][2*n-j] = espace


addi $6,$6,1 #j++
j for2
endfor2:


sub $22,$10,$5
ori $6,$22,0 #j=n-i
add $22,$10,$5
addi $22,$22,1 # n+i+1

for3:
slt $21,$6,$22
beq $21, $0, endfor3 # saut si j>=n+i+1


sll $8,$10,1 #n*2
addi $8,$8,2 #n*2+2
mult $8,$5
mflo $8  # (n*2+2)*i
add $8,$8,$6 # (n*2+2)*i + j
add $8,$8,$4 # $8 = @image[i][j]
sb $19, 0($8) #image[i][j] = etoile


addi $6,$6,1 #j++
j for3
endfor3:


sll $8,$10,1 #n*2
addi $8,$8,2 #n*2+2
mult $8,$5
mflo $8  # (n*2+2)*i
sll $9,$10,1 #n*2
addi $9, $9,1 #n*2 +1
add $9,$9,$8 # (n*2+2)*i + (n*2 +1)
add $9,$9,$4 # $8 = @image[i][n*2 +1]
ori $23,$0, 0xA
sb $23, 0($9) #image[i][2*n-j] = espace

addi $5,$5,1 #i++
j for1
endfor1:



 #########Affichage##########
ori $2,$0,4
syscall
ori $2,$0,10 #########exit###########
syscall



============================================================================================

 ===============
|| Exercice 3: ||
================

.data
N:	.word 3
mat1:	.word 1,1,1 ,1,1,1 ,1,1,1
mat2:	.word 1,1,1 ,1,1,1 ,1,1,1
mat3:	.space 36
.text
lui $3, 0x1001
lw $14,0($3)	#N=3
xor $5,$5,$5	#i=0

boucle1:

slt $20,$5,$14	# i<N
beq $20,$0 end1

xor $6,$6,$6	#j=0
boucle2:

slt $20,$6,$14	# j<N
beq $20,$0 end2

mult $14,$5	#i*N
mflo $7
add $7,$7,$6	#i*N+j
sll $7,$7,2	# (i*N+j)*4
add $7,$7,$3

addi $8,$7,4	#@mat1[i][j]
addi $9,$7,40	#@mat2[i][j]
addi $10,$7,76	#@mat3[i][j]

lw $8,0($8)	#$8 = mat1[i][j]
lw $9,0($9)	#$9 = mat2[i][j]
add $8,$8,$9	# mat1[i][j] + mat2[i][j]
sw $8,0($10)	# mat3[i][j] = mat1[i][j] + mat2[i][j]

ori $4,$8,0
ori $2,$0,1	#affichage la somme
syscall

ori $2,$0,11
ori $4,$0, 0x20  #affichage espace
syscall

addi $6,$6,1	#j++
j boucle2
end2:

ori $2,$0,11
ori $4,$0, 0x0A  #affichage \n
syscall

addi $5,$5,1	#i++
j boucle1
end1:

ori $2,$0,10
syscall

